#region Header
////////////////////////////////////////////////////////////////////////////////////
//
//	File Description: RMI Cache
// ---------------------------------------------------------------------------------
//	Date Created	: April 3, 2014
//	Author			: Rob van Oostenrijk
// ---------------------------------------------------------------------------------
// 	Change History
//	Date Modified       : 
//	Changed By          : 
//	Change Description  : 
//
////////////////////////////////////////////////////////////////////////////////////
#endregion
using System;
using System.Configuration;
using TcmCDService.Configuration;
using TcmCDService.Logging;

namespace TcmCDService.CacheTypes
{
	/// <summary>
	/// <see cref="RMICache" /> exposes a <see cref="T:TcmCDService.CacheTypes.CacheType" /> using Java Remove Method Invocation to register with the Tridion 
	/// Cache Channel service in order to invalidate cache items.
	/// </summary>
	/// <remarks>This class uses Java code generated by IKVM (http://www.ikvm.net) as .NET bytecode to implement Java RMI</remarks>
	public class RMICache : TcmCDService.CacheTypes.CacheType, com.tridion.tcmcdservice.rmi.CacheChannelEventListener
	{
		private com.tridion.tcmcdservice.rmi.CacheChannelConnector mConnector;
		private bool mIsClosed = false;

		/// <summary>
		/// Handles a connection event for the <see cref="TcmCDService.CacheClient.RMI.CacheConnector" />
		/// </summary>
		void com.tridion.tcmcdservice.rmi.CacheChannelEventListener.onConnect()
		{
			base.OnConnected();
		}

		/// <summary>
		/// Handles a disconnection event for the <see cref="TcmCDService.CacheClient.RMI.CacheConnector" />
		/// </summary>
		void com.tridion.tcmcdservice.rmi.CacheChannelEventListener.onDisconnect()
		{
			base.OnDisconnected();
		}

		/// <summary>
		/// Handles a log event for the <see cref="TcmCDService.CacheClient.RMI.CacheConnector" />
		/// </summary>
		/// <param name="str">Log message <see cref="T:System.String" /></param>
		void com.tridion.tcmcdservice.rmi.CacheChannelEventListener.onLog(String message)
		{
			Logger.Info("RMI Interop: {0}", message);
		}

		/// <summary>
		/// Handles a cache event for the <see cref="TcmCDService.CacheClient.RMI.CacheConnector" />
		/// </summary>
		/// <param name="region">Cache region</param>
		/// <param name="key">Cache key</param>
		/// <param name="eventType">Cache event type</param>
		void com.tridion.tcmcdservice.rmi.CacheChannelEventListener.onCacheEvent(String region, String key, int eventType)
		{
			CacheRegion cacheRegion = CacheRegionExtensions.ToCacheRegion(region);
			CacheEventType cacheEventType = (CacheEventType)eventType;

			base.OnCacheEvent(cacheRegion, key, cacheEventType);
		}

		/// <summary>
		/// Gets the unique client identifier of this <see cref="RMICache" />
		/// </summary>
		/// <value>
		/// The unique client identifier of this <see cref="RMICache" />
		/// </value>
		public override String Identifier
		{
			get
			{
				return mConnector.getGUID();
			}
		}

		/// <summary>
		/// Gets the expiration of cache items in minutes
		/// </summary>
		/// <value>
		/// Expiration of cache items in minutes
		/// </value>
		/// <remarks>-1 means no caching applies</remarks>
		public override int Expiration
		{
			get
			{
				return Config.Instance.DefaultCacheExpiry;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RMICache"/> class.
		/// </summary>
		/// <param name="settings"><see cref="T:TcmCDService.Configuration.Settings" /></param>
		public RMICache(Settings settings): base(settings)
		{
			String host = settings.Get<String>("host");

			if (String.IsNullOrEmpty(host))
				throw new ConfigurationErrorsException("RMICache: Host is unconfigured.");

			int port = settings.Get<int>("port");

			if (port == 0)
				throw new ConfigurationErrorsException("RMICache: Port is unconfigured.");

			String instanceIdentifier = settings.Get<String>("instanceIdentifier");

			try
			{
				mConnector = new com.tridion.tcmcdservice.rmi.CacheChannelConnector(host, port, instanceIdentifier);
				
				// Assign ourselves as a listener interface
				mConnector.setListener(this);
				
				Logger.Info("RMICache: {0}", mConnector.getGUID());
			}
			catch (com.tridion.tcmcdservice.rmi.CacheException ex)
			{
				Logger.Error("RMICache", ex.fillInStackTrace());
			}
		}

		/// <summary>
		/// Instruct this <see cref="RMICache" /> to connect to the remote cache system if required.
		/// </summary>
		public override void Connect()
		{
			if (!mIsClosed)
				mConnector.validate();
		}

		/// <summary>
		/// Instruct this <see cref="RMICache" /> to disconnect from a remote cache system if required.
		/// </summary>
		public override void Disconnect()
		{
			if (!mIsClosed && mConnector != null)
			{
				mIsClosed = true;
				mConnector.disconnect();
			}
		}

		/// <summary>
		/// Broadcasts a cache event to all other connected clients
		/// </summary>
		/// <param name="cacheRegion"><see cref="T:TcmCDService.CacheTypes.CacheRegion" /></param>
		/// <param name="key">Cache key as <see cref="T:System.String" /></param>
		/// <param name="eventType"><see cref="T:TcmCDService.CacheTypes.CacheEventType" /></param>
		public override void BroadcastEvent(CacheRegion cacheRegion, String key, CacheEventType eventType)
		{
			mConnector.broadcastEvent(new com.tridion.cache.CacheEvent(CacheRegionExtensions.FromCacheRegion(cacheRegion), key, (int)eventType));
		}

		/// <summary>
		/// Broadcasts a cache event to all other connected clients
		/// </summary>
		/// <param name="cacheRegion"><see cref="T:TcmCDService.CacheTypes.CacheRegion" /></param>
		/// <param name="key">Cache key as <see cref="T:System.Int32" /></param>
		/// <param name="eventType"><see cref="T:TcmCDService.CacheTypes.CacheEventType" /></param>
		public override void BroadcastEvent(CacheRegion cacheRegion, int key, CacheEventType eventType)
		{
			mConnector.broadcastEvent(new com.tridion.cache.CacheEvent(CacheRegionExtensions.FromCacheRegion(cacheRegion), new java.lang.Integer(key), (int)eventType));
		}

		/// <summary>
		/// Releases unmanaged and - optionally - managed resources.
		/// </summary>
		/// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
		protected override void Dispose(Boolean disposing)
		{
			base.Dispose(disposing);

			if (disposing)
			{
				try
				{
					// Ensure no java background threads are blocking the process from exiting
					java.rmi.server.UnicastRemoteObject.unexportObject(mConnector, true);
				}
				catch (java.rmi.NoSuchObjectException ex)
				{
					Logger.Error("RMICache", ex.fillInStackTrace());
				}
			}
		}
	}
}
